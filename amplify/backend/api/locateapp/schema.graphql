schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type BusLinkMobile {
  busId: String!
  busName: [String]
  mobileId: [String]
  restriction: Boolean!
}

type BusLinkMobileConnection {
  items: [BusLinkMobile]
  nextToken: String
}

type Customer @key(name: "byAccountIdPassword",fields: ["accountId","password"]) {
  accountId: String!
  apiKey: String!
  busId: [String!]!
  contractUnits: Int!
  customerId: String!
  password: String!
  url: String!
}

type CustomerConnection {
  items: [Customer]
  nextToken: String
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

type Mutation {
  createBusLinkMobile(input: CreateBusLinkMobileInput!): BusLinkMobile
  createCustomer(input: CreateCustomerInput!): Customer
  createUser(condition: ModelUserConditionInput, input: CreateUserInput!): User
  deleteBusLinkMobile(input: DeleteBusLinkMobileInput!): BusLinkMobile
  deleteCustomer(input: DeleteCustomerInput!): Customer
  deleteUser(condition: ModelUserConditionInput, input: DeleteUserInput!): User
  updateBusLinkMobile(input: UpdateBusLinkMobileInput!): BusLinkMobile
  updateCustomer(input: UpdateCustomerInput!): Customer
  updateUser(condition: ModelUserConditionInput, input: UpdateUserInput!): User
}

type Query {
  getBusLinkMobile(busId: String!): BusLinkMobile
  getCustomer(accountId: String!, customerId: String!): Customer
  getLogin(accountId: String!, password: String!): Customer
  getUser(id: ID!): User
  listBusLinkMobiles(filter: TableBusLinkMobileFilterInput, limit: Int, nextToken: String): BusLinkMobileConnection
  listCustomers(filter: TableCustomerFilterInput, limit: Int, nextToken: String): CustomerConnection
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
}

type Subscription {
  onCreateBusLinkMobile(busId: String, busName: [String], mobileId: [String], restriction: Boolean): BusLinkMobile @aws_subscribe(mutations : ["createBusLinkMobile"])
  onCreateCustomer(accountId: String, apiKey: String, busId: [String!], customerId: String, password: String): Customer @aws_subscribe(mutations : ["createCustomer"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations : ["createUser"])
  onDeleteBusLinkMobile(busId: String, busName: [String], mobileId: [String], restriction: Boolean): BusLinkMobile @aws_subscribe(mutations : ["deleteBusLinkMobile"])
  onDeleteCustomer(accountId: String, apiKey: String, busId: [String!], customerId: String, password: String): Customer @aws_subscribe(mutations : ["deleteCustomer"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateBusLinkMobile(busId: String, busName: [String], mobileId: [String], restriction: Boolean): BusLinkMobile @aws_subscribe(mutations : ["updateBusLinkMobile"])
  onUpdateCustomer(accountId: String, apiKey: String, busId: [String!], customerId: String, password: String): Customer @aws_subscribe(mutations : ["updateCustomer"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations : ["updateUser"])
}

type User {
  createdAt: AWSDateTime!
  description: String
  id: ID!
  name: String!
  password: String
  updatedAt: AWSDateTime!
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateBusLinkMobileInput {
  busId: String!
  busName: [String]
  mobileId: [String]
  restriction: Boolean!
}

input CreateCustomerInput {
  accountId: String!
  apiKey: String!
  busId: [String!]!
  contractUnits: Int!
  customerId: String!
  password: String!
  url: String!
}

input CreateUserInput {
  description: String
  id: ID
  name: String!
  password: String
}

input DeleteBusLinkMobileInput {
  busId: String!
}

input DeleteCustomerInput {
  accountId: String!
  customerId: String!
}

input DeleteUserInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input ModelSubscriptionUserFilterInput {
  and: [ModelSubscriptionUserFilterInput]
  createdAt: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionUserFilterInput]
  password: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelUserConditionInput {
  and: [ModelUserConditionInput]
  createdAt: ModelStringInput
  description: ModelStringInput
  name: ModelStringInput
  not: ModelUserConditionInput
  or: [ModelUserConditionInput]
  password: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelUserFilterInput {
  and: [ModelUserFilterInput]
  createdAt: ModelStringInput
  description: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelUserFilterInput
  or: [ModelUserFilterInput]
  password: ModelStringInput
  updatedAt: ModelStringInput
}

input TableBooleanFilterInput {
  attributeExists: Boolean
  eq: Boolean
  ne: Boolean
}

input TableBusLinkMobileFilterInput {
  busId: TableStringFilterInput
  busName: TableStringFilterInput
  mobileId: TableStringFilterInput
  restriction: TableBooleanFilterInput
}

input TableCustomerFilterInput {
  accountId: TableStringFilterInput
  apiKey: TableStringFilterInput
  busId: TableStringFilterInput
  contractUnits: TableIntFilterInput
  customerId: TableStringFilterInput
  password: TableStringFilterInput
  url: TableStringFilterInput
}

input TableFloatFilterInput {
  attributeExists: Boolean
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input TableIDFilterInput {
  attributeExists: Boolean
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input TableIntFilterInput {
  attributeExists: Boolean
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input TableStringFilterInput {
  attributeExists: Boolean
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input UpdateBusLinkMobileInput {
  busId: String!
  busName: [String]
  mobileId: [String]
  restriction: Boolean
}

input UpdateCustomerInput {
  accountId: String!
  apiKey: String
  busId: [String!]
  contractUnits: Int
  customerId: String!
  password: String
  url: String
}

input UpdateUserInput {
  description: String
  id: ID!
  name: String
  password: String
}
